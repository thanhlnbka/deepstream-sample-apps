/*
 * SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: LicenseRef-NvidiaProprietary
 *
 * NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
 * property and proprietary rights in and to this material, related
 * documentation and any modifications thereto. Any use, reproduction,
 * disclosure or distribution of this material and related documentation
 * without an express license agreement from NVIDIA CORPORATION or
 * its affiliates is strictly prohibited.
 */

/**
 * @file
 * <b>DataReceiver definition </b>
 *
 */
#ifndef NVIDIA_DEEPSTREAM_DATA_RECEIVER
#define NVIDIA_DEEPSTREAM_DATA_RECEIVER

#include <mutex>

#include "signal_handler.hpp"
#include "buffer.hpp"

namespace deepstream {

/**
 * @brief A specific signal handler for consuming data
 *
 * Users must implement the IDataConsumer interface to create a
 * data receiver.
 * Data receiver can only be attached to elements that supports
 * "new-sample" signal, typically an "appsink".
 *
 **/
class DataReceiver : public SignalHandler {
 public:
  /**
   * @brief required interface for a data receiver
   *
   * Invoked when the data is generated by the element to which
   * the data receiver is attached.
  */
  class IDataConsumer {
   public:
   /**
     * @brief Read a data block
     *
     * Implementation of this virtual method requires generating a
     * buffer based on the data request.
     *
     * @param[in]  receiver reference to the data receiver
     * @param[in]  buffer   buffer containing the generated data
     * @return              number of buffers, negative value indicates error
     */
     virtual int consume(DataReceiver& receiver, Buffer buffer) = 0;
     virtual ~IDataConsumer() {}
  };

  /**
   * @brief  Constructor
   *
   * Create a data reciver with a user implemented data provider interface
   *
   * @param[in] name        name of the instance
   * @param[in] handler     implementation of the IDataConsumer interface
   */
  DataReceiver(const std::string &name, IDataConsumer* consumer, unsigned int retries = 0);

  /**
   * @brief  Constructor
   *
   * Create a data reciver with a user implemented data provider interface
   *
   * @param[in] name        name of the instance
   * @param[in] factory     name of the factory to create the instance
   * @param[in] handler     implementation of the IDataConsumer interface
   */
  DataReceiver(const std::string &name, const char* factory, IDataConsumer* consumer, unsigned int retries = 0);

  /** @brief Destructor */
  virtual ~DataReceiver();

   /**
    * @brief Consume a buffer
    *
    * The method is called from the pipeline and invokes the its own
    * IDataConsumer interface.
    *
    **/
  int consume(Buffer buffer);

 protected:
  std::unique_ptr<IDataConsumer> data_consumer_;
  unsigned int retries_;
};
}

#endif