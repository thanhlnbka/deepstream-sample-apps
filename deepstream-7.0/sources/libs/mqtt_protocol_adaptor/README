##################################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##################################################################################################

This project implements the protocol adaptor for MQTT.
The adaptor implements and exposed the DSMI API for client applications to interface with it.

Dependencies
-------------
* glib 2.0
 $ sudo apt-get install libglib2.0 libglib2.0-dev

* cjson
 $ apt-get install libcjson-dev

* ssl

  apt-get install libssl-dev

* mosquitto 2.0.15
 $ wget https://mosquitto.org/files/source/mosquitto-2.0.15.tar.gz
 $ tar -xvf mosquitto-2.0.15.tar.gz
 $ cd mosquitto-2.0.15
 $ make
 $ make install
 $ sudo cp /usr/local/lib/libmosquitto* /opt/nvidia/deepstream/deepstream/lib/
 $ sudo ldconfig

Run mosquitto broker
--------------------
 $ adduser --system mosquitto 
 $ mosquitto
To run with specific mosquitto broker config file:
 $ mosquitto -c <path_to_config_file>
 Ex:
 $ mosquitto -c /etc/mosquitto/mosquitto.conf

mqtt cfg:
---------
* username - the username to be set to authenticate with the mosquitto broker, if enabled
* password - the password to be set to authenticate with the mosquitto broker, if enabled
* client-id - string to use as client ID. If empty, a random client ID will be generated. Each client ID must be unique to connect
    to the same broker
* enable-tls - 0 for no, 1 for yes
    Enable TLS encryption. If enabled, at least one of tls-cafile and tls-capath must be set.         
* tls-cafile - path to a file containing the PEM encoded trusted CA certificate files. Either cafile or capath must be provided.
* tls-capath - path to a directory containing the PEM encoded trusted CA certificate files. Either cafile or capath must be provided.
    For capath to work correctly, the certificates files must have ".pem" as the file ending and you must run 
    "openssl rehash <path to capath>" each time you add/remove a certificate.
* tls-certfile - path to a file containing the PEM encoded certificate file for this client. If not provided, no
    client certificate will be used.
* tls-keyfile - path to a file containing the PEM encoded private key for this client. If not provided. no
    client certificate will be used.
* share-connection - 0 for no, 1 for yes
    Uncomment the field share-connection in cfg_mqtt.txt and set its value to 1
    if you need to generate a connection signature. This signature is a unique string
    which is generated by parsing all the mqtt connection related params
    used for making a connection
    Uncommenting this field signifies that the connection created can be shared
    with other components within the same process.
* loop-timeout - timeout in ms to pass to the mosquitto_loop() call. Default is 2000 ms.
    This refers to the maximum number of milliseconds to wait for network activity 
    before the call times out. Set to 0 for instant return.
* keep-alive - number of seconds after which the broker should send a PING message to the client
    if no other messages have been exchanged in that time.

Enable authentication:
----------------------
1. Create a simple text file and enter the username and password pairs, one for each line such as below:
        user1:password1
        user2:password2

2. Encrypt the password file using the following command:
   $ mosquitto_passwd -U <path_to_password_file>

3. Change the following configurations at /etc/mosquitto/mosquitto.conf (or write a new config file):
   allow_anonymous false
   password_file <path_to_password_file>

4. Run the mosquitto broker using the updated config file

5. Update the mqtt protocol adapter config file with a valid username and password

Enable TLS encryption:
----------------------
mosquitto provides TLS support for encrypted network connections and authentication. The broker can be configured
to accept CA certificates, the broker server certificate, and broker server key, and to require certification from
clients attempting to connect. The CA certificates, client server certificate, and client server key can be passed to 
the mqtt protocol adapter through the adapter config file.

1. Change the following configurations at /etc/mosquitto/mosquitto.conf (or write a new config file):
    # At least one of cafile or capath must be defined
    # cafile is a file ending in ".crt" containing PEM encoded CA certificates
    cafile <path to CA crt file>
    # capath is a directory contaning PEM encoded CA certificate files ending in ".pem".
    # For capath to work correctly, the certificates files must have ".pem" as the file ending 
    # and you must run "openssl rehash <path to capath>" each time you add/remove a certificate.
    capath <path to directory containing CA certificates>

    # Path to the PEM encoded server certificate for the broker.
    certfile <path to broker crt file>

    # Path to the PEM encoded keyfile for the broker.
    keyfile <path to broker key file>
    
    # By setting require_certificate to true,
    # the client must provide a valid certificate in order for the network
    # connection to proceed. This allows access to the broker to be controlled
    # outside of the mechanisms provided by MQTT.
    require_certificate true

2. Run the broker using the updated config file

3. Test the broker configuration using mosquitto_pub:
    e.g.
    $ mosquitto_pub -p 1883 --cafile <path to CA crt file> --cert <path to client crt file> --key <path to client key file> -h localhost -m hello -t /world
    or
    $ mosquitto_pub -p 1883 --capath <path to directory containing CA certificates> --cert <path to client crt file> --key <path to client key file> -h localhost -m hello -t /world

4. Update the mqtt protocol adapter config with the cafile/capath. If require_certificate is set to true in the broker config,
   the client certfile, and client keyfile must also be provided.

Setup and enable logging:
-------------------------
Before running the sample applications, enable logs by running the logger setup script:
For x86,
 chmod u+x /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh
On Jetson,
 chmod u+x /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh

To run test program:
--------------------
 make -f Makefile.test
 ./test_mqtt_proto_async

Verify messages:
----------------
Use mosquitto sub client to start a subscriber on the topic. For example, for the topic "topic1":
 $ mosquitto_sub -t topic1 -v

In another terminal, you can also publish messages using the mosquitto pub client. For example, to publish the message "hello world" to the topic "topic1":
 $ mosquitto_pub -t 'topic1' -m 'hello world'

Limitations:
------------
Synchronous send through `nvds_msgapi_send()` is not currently supported.