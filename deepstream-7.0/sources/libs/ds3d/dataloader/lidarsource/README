################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
################################################################################

DS3D Lidar file data loader is an implementation of `ds3d::dataloader` which produces
`ds3d::datamap` for data capture each time. This lidar data reader example guide
users how to implement their own sensor data or file capture.
DS3D is framework agnostic. There is no gstreamer/Glib dependencies. Any framework could
simply wrap DS3D modules.

`libnvds_lidarfileread.so` is built from these source files. and the lidar data loader
is created through API `createLidarFileLoader`. Application users can call this API
to instantiate a lidar file dataloader.

In compatible with Gstreamer plugins, `ds3d::dataloader` could be loaded into GstAppSrc
in runtime through API `NvDs3D_CreateDataLoaderSrc(config)`
The config content shall as:

    type: ds3d::dataloader
    out_caps: ds3d/datamap
    custom_lib_path: libnvds_lidarfileread.so
    custom_create_function: createLidarFileLoader
    config_body:
       ...

Any custom `ds3d::dataloader` must derive from `ds3d::SyncImplDataLoader` for sychronized
dataloader. And implement the following interfaces:

    ErrCode startImpl(const std::string& content, const std::string& path) override;
    ErrCode readDataImpl(GuardDataMap& datamap) override;
    ErrCode stopImpl() override;
    ErrCode flushImpl() override;

In addition, users also need export a C-API for application to intiate this dataloader.
The exported C-API name is not limited. In this sample, it is `createLidarFileLoader`.

More details, refer to the DeepStream SDK documentation for section of "DeepStream 3D Custom Manual".
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_3D_Custom_Manual.html

--------------------------------------------------------------------------------
Pre-requisites:
- libyaml-cpp Development package
- CUDA Runtime

--------------------------------------------------------------------------------
Compiling and installing this `ds3d::dataloader` lib:
- Export or set in Makefile the appropriate CUDA_VER, e.g.
  $ export CUDA_VER=12.2 # set the right CUDA version
- Run make and sudo make install
  $ make && make install
- Verify `libnvds_lidarfileread.so` exist and installed well.

NOTE: To compile the sources, run make with "sudo" or root permission.
